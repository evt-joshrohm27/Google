// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Protobuf definitions for Saxml. This API is experimental.

syntax = "proto3";

package sax;

enum ModelStatus {
  NONE = 0;       // Unused: unloaded models are removed from responses.
  LOADING = 1;    // This model is being loaded and can't serve yet.
  LOADED = 2;     // This model is loaded and ready to serve.
  FAILED = 3;     // This model failed to load or unload.
  UNLOADING = 4;  // This model is being unloaded and can't serve anymore.
}

message AccessControlLists {
  // items[method] specifies the access control list name for the given method.
  //
  // A method corresponds to the model data method, e.g., lm.score, lm.generate,
  // vm.classify. The ACL name is up to the implementation to interpret, but in
  // general the ACL name is a group name.
  //
  // E.g., the following ACLs opens scoring method to all and restricts
  // generation method to the group foo.
  // items {
  //   "lm.score" : "all"
  //   "lm.generate" : "foo"
  // }
  map<string, string> items = 1;
}

message Tensor {
  // Tensors in float flattend to 1d. Reshaping information can be infered from
  // model attributes or other extra inputs.
  repeated float values = 1 [packed = true];
}

message ExtraInputs {
  // items[input_key] specifies value set for an input_key.
  //
  // E.g., the following extra inputs will change input.tempeature to 0.1 in
  // sampling decode.
  // items {
  //   "temperature" : "0.1"
  // }
  map<string, float> items = 1;
  // tensors[input_key] specifies tensors set for an input_key.
  //
  // E.g., the following extra inputs will change input.tensors as soft prompt.
  // tensors {
  //   "prompt_embeddings" : [0.1, 0.2, 0.3, 0.4]
  // }
  // It is invalid for the same key to appear in both items and tensors.
  map<string, Tensor> tensors = 2;
}
